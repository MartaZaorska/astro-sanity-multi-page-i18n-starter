---
import { type Language, useTranslations, LANGUAGES, getLangPrefix } from '@/global/languages';
import type { HTMLAttributes } from 'astro/types';

type Props = {
  lang: Language;
  alternates: { lang: string; url: string }[];
} & HTMLAttributes<'div'>;

const { lang, alternates, ...props } = Astro.props;

const languageData = useTranslations(lang)('language');
---

<div
  data-language-switcher
  {...props}
>
  <button
    aria-expanded='false'
    aria-controls='language-switcher-header'
    aria-label={languageData.switcherAriaLabel}
  >
    <svg
      xmlns='http://www.w3.org/2000/svg'
      width='24'
      height='24'
      viewBox='0 0 24 24'
      fill='none'
      ><path
        fill='#000'
        d='M12 21a8.724 8.724 0 0 1-3.5-.71 9.123 9.123 0 0 1-2.86-1.93 9.162 9.162 0 0 1-1.93-2.86A8.674 8.674 0 0 1 3 12c0-1.243.237-2.41.71-3.503A9.118 9.118 0 0 1 5.64 5.64 9.184 9.184 0 0 1 8.5 3.71 8.723 8.723 0 0 1 12 3c1.243 0 2.41.237 3.503.71a9.13 9.13 0 0 1 2.858 1.93 9.157 9.157 0 0 1 1.929 2.857A8.722 8.722 0 0 1 21 12a8.724 8.724 0 0 1-.71 3.5 9.123 9.123 0 0 1-1.93 2.86 9.172 9.172 0 0 1-2.857 1.93A8.668 8.668 0 0 1 12 21Zm0-.992a14.959 14.959 0 0 0 1.452-2.221c.38-.727.69-1.54.929-2.44H9.619c.265.95.58 1.79.948 2.516.368.727.846 1.442 1.433 2.145Zm-1.273-.15c-.467-.55-.893-1.23-1.278-2.04a11.683 11.683 0 0 1-.86-2.472H4.754a7.943 7.943 0 0 0 2.437 3.06 7.358 7.358 0 0 0 3.536 1.452Zm2.546 0a7.359 7.359 0 0 0 3.536-1.452 7.943 7.943 0 0 0 2.437-3.06h-3.834a17.26 17.26 0 0 1-.957 2.491c-.385.81-.78 1.484-1.182 2.021Zm-8.927-5.511h4.035c-.076-.41-.13-.81-.16-1.2a13.977 13.977 0 0 1-.001-2.294c.031-.389.085-.789.16-1.2H4.347a8.156 8.156 0 0 0-.256 3.562c.06.409.146.786.255 1.131m5.035 0h5.238c.076-.41.13-.803.16-1.18a14.059 14.059 0 0 0 .001-2.332c-.031-.376-.085-.77-.16-1.18H9.38c-.075.41-.129.803-.16 1.18-.031.376-.047.765-.047 1.166a12.148 12.148 0 0 0 .208 2.346Zm6.239 0h4.034c.109-.346.194-.723.255-1.131a8.261 8.261 0 0 0 0-2.43 7.307 7.307 0 0 0-.255-1.131h-4.035c.076.41.13.81.16 1.199a14.001 14.001 0 0 1 .001 2.294c-.031.39-.085.79-.16 1.2m-.208-5.693h3.834c-.586-1.27-1.389-2.29-2.408-3.06-1.02-.77-2.208-1.261-3.565-1.471.467.614.886 1.316 1.259 2.107.373.79.666 1.598.88 2.424Zm-5.793 0h4.762a13.82 13.82 0 0 0-.977-2.546A11.147 11.147 0 0 0 12 3.992a11.105 11.105 0 0 0-1.404 2.116c-.387.76-.714 1.608-.977 2.546Zm-4.864 0h3.834a13.8 13.8 0 0 1 .88-2.424 11.74 11.74 0 0 1 1.259-2.107c-1.37.21-2.56.704-3.574 1.48-1.013.777-1.813 1.794-2.4 3.05'
      ></path></svg
    >
    <span>{languageData.names[lang]}</span>
    <svg
      xmlns='http://www.w3.org/2000/svg'
      width='12'
      height='13'
      viewBox='0 0 12 13'
      fill='none'
      ><path
        stroke='#121212'
        d='M9.5 8 6 5 2.5 8'
      ></path></svg
    >
  </button>
  <div
    id='language-switcher-header'
    class='dropdown'
  >
    {
      LANGUAGES.map(locale => (
        <a
          href={alternates.find(item => item.lang === locale)?.url || `${getLangPrefix(lang) || '/'}`}
          aria-current={lang === locale ? 'page' : undefined}
          lang={locale}
        >
          {`${languageData.names[locale]} (${locale === lang ? languageData.alternativeName : useTranslations(locale)('language').names[locale]})`}
        </a>
      ))
    }
  </div>
</div>
<style lang='scss'>
  [data-language-switcher] {
    width: fit-content;
    position: relative;
    button {
      display: flex;
      align-items: center;
      gap: 0.3rem;
      border: 1px solid var(--neutral-600);
      border-radius: 0.3rem;
      padding: 0.3rem;
      background-color: var(--neutral-100);
      transition: background-color 200ms;

      svg:last-child {
        transition: transform 100ms;
        transform: scaleY(-1);
      }

      &:hover {
        background-color: var(--neutral-200);
      }

      &:focus-visible {
        outline-offset: 0;
      }

      &[aria-expanded='true'] {
        background-color: var(--neutral-200);

        svg:last-child {
          transform: scaleY(1);
        }
      }
    }

    .dropdown {
      max-width: 12rem;
      position: absolute;
      background-color: var(--neutral-200);
      border: 1px solid var(--neutral-600);
      padding: 0.3rem;
      border-radius: 0.3rem;
      width: max-content;
      display: grid;
      gap: 0.2rem;
      left: 0;
      right: auto;
      top: calc(100% + 0.2rem);
      visibility: hidden;

      @media (min-width: 48rem) {
        left: auto;
        right: 0;
      }

      a {
        font-size: 0.95rem;
        padding: 0.3rem 0.5rem;
        background-color: transparent;
        transition: background-color 200ms;
        color: var(--neutral-600);
        border-radius: 0.2rem;

        &:hover {
          background-color: var(--neutral-100);
        }

        &:focus-visible {
          outline-offset: 0;
        }

        &[aria-current='page'] {
          background-color: var(--primary-500);
          color: var(--neutral-100);
        }
      }
    }

    button[aria-expanded='true'] + .dropdown {
      visibility: visible;
    }
  }
</style>
<script>
  const switchers = document.querySelectorAll<HTMLDivElement>('[data-language-switcher]') ?? [];

  switchers.forEach(element => {
    let lastScrollY = NaN;
    const button = element.querySelector('button')!;
    const options = document.querySelectorAll<HTMLAnchorElement>('.dropdown a');

    button.addEventListener('click', () => toggleDropdown(button.ariaExpanded === 'true'));

    element.addEventListener('focusout', () => {
      const isFocus = !!document.querySelector('[data-language-switcher]:focus-within');
      if (!isFocus) toggleDropdown(true);
    });

    function documentClickHandler(e: MouseEvent) {
      if (!element.contains(e.target as Node)) toggleDropdown(true);
    }

    function scrollHandler() {
      const currentScrollY = window.scrollY;
      if (isNaN(lastScrollY)) lastScrollY = currentScrollY;
      if (Math.abs(currentScrollY - lastScrollY) > 80) toggleDropdown(true);
    }

    function documentKeyDownHandler(e: KeyboardEvent) {
      if (e.key === 'Escape') {
        toggleDropdown(true);
        return;
      }

      const currentIndex = Array.from(options).findIndex(option => option === document.activeElement);
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        options[currentIndex === options.length - 1 ? 0 : currentIndex + 1].focus();
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        options[currentIndex === 0 || currentIndex === -1 ? options.length - 1 : currentIndex - 1].focus();
      }
    }

    function toggleDropdown(close: boolean) {
      button.ariaExpanded = (!close).toString();
      if (close) {
        document.removeEventListener('click', documentClickHandler);
        document.removeEventListener('keydown', documentKeyDownHandler);
        window.removeEventListener('scroll', scrollHandler);
      } else {
        document.addEventListener('click', documentClickHandler);
        document.addEventListener('keydown', documentKeyDownHandler);
        window.addEventListener('scroll', scrollHandler);
      }
    }
  });
</script>
