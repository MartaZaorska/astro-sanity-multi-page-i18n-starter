---
import { POSTS_PER_PAGE } from '@/global/constants';
import { useTranslations, type Language } from '@/global/languages';
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/components/ui/portable-text';
import BlogCard, { BlogCardQuery, type BlogCardProps } from '@/components/ui/BlogCard.astro';
import Pagination from '@/components/ui/Pagination.astro';
import CategoryTab from '@/components/ui/CategoryTab.astro';

export const ListingQuery = ({ categorySlug = '', page = 1 }: { categorySlug?: string; page?: number }) => {
  const OFFSET = POSTS_PER_PAGE * (page - 1);
  const START = OFFSET;
  const END = OFFSET + POSTS_PER_PAGE;
  return `
    {
      "posts": *[_type == "BlogPost_Collection" && language == $lang${categorySlug ? ` && category->slug.current == "${categorySlug}"` : ''}] | order(coalesce(publishedAt, _createdAt) desc) [${START}...${END}] {
        ${BlogCardQuery}
      },
      "categories": *[_type == "BlogCategory_Collection" && language == $lang && count(*[_type == "BlogPost_Collection" && references(^._id)]) > 0]{
        name,
        "slug": slug.current,
        "count": count(*[_type == "BlogPost_Collection" && references(^._id) && defined(category)])
      },
      "totalPosts": count(*[_type == "BlogPost_Collection" && language == $lang]),
      "content": *[_type == ${categorySlug ? `"BlogCategory_Collection" && slug.current == "${categorySlug}"` : `"Blog_Page"`} && language == $lang][0]{
        ${PortableTextQuery('heading')}
        ${PortableTextQuery('paragraph')}
      },
      ${categorySlug ? `"totalPostsByCategory": count(*[_type == "BlogPost_Collection" && language == $lang && category->slug.current == "${categorySlug}"])` : ''}
    }
  `;
};

export type ListingProps = {
  posts: BlogCardProps[];
  categories: { name: string; slug: string; count: number }[];
  totalPosts: number;
  totalPostsByCategory?: number;
  content: {
    heading: PortableTextValue;
    paragraph: PortableTextValue;
  };
  currentPage?: number;
  currentCategorySlug?: string;
  totalPages: number;
  lang: Language
  blogPageSlug: string;
};

const {
  posts,
  categories,
  totalPosts,
  content: { heading, paragraph },
  currentPage = 1,
  currentCategorySlug = '',
  totalPages,
  lang,
  blogPageSlug
} = Astro.props as ListingProps;

const blogData = useTranslations(lang)('blog');
---

<section
  class='Listing max-width'
  id='listing'
>
  <header>
    <PortableText
      value={heading}
      heading='h1'
    />
    <PortableText value={paragraph} />
  </header>
  {
    categories.length > 0 && (
      <nav
        role='navigation'
        aria-label={blogData.ariaLabelNav}
      >
        <CategoryTab
          slug={`${blogPageSlug}#listing`}
          count={totalPosts}
          isActive={!currentCategorySlug}
        >
          {blogData.allPostsLabel}
        </CategoryTab>
        {categories.map(category => (
          <CategoryTab
            slug={`${category.slug}#listing`}
            count={category.count}
            isActive={currentCategorySlug === category.slug}
          >
            {category.name}
          </CategoryTab>
        ))}
      </nav>
    )
  }
  <div class='posts'>
    {
      posts?.map((post, i) => (
        <BlogCard
          {...post}
          imgProps={{
            priority: i === 0,
            loading: i < 3 ? 'eager' : 'lazy',
            sizes: '(min-width: 1400px) 408px, (min-width: 960px) 33vw, (min-width: 768px) 50vw, 100vw',
          }}
          lang={lang}
        />
      ))
    }
  </div>
  {
    totalPages > 1 && (
      <Pagination
        lang={lang}
        totalPages={totalPages}
        currentPage={currentPage}
        slugPrefix={currentCategorySlug || blogPageSlug}
      />
    )
  }
</section>
<style lang='scss'>
  .Listing {
    margin: 5rem auto;

    header {
      text-align: center;
      max-width: 40rem;
      display: grid;
      gap: 3rem;
      margin: 0 auto;
    }

    nav {
      margin: 3rem 0;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .posts {
      display: grid;
      grid-template-columns: 1fr;
      gap: 2.5rem;
      @media (min-width: 48rem) {
        grid-template-columns: repeat(2, 1fr);
      }

      @media (min-width: 60rem) {
        grid-template-columns: repeat(3, 1fr);
      }
    }
  }
</style>
