---
import { useTranslations, DEFAULT_LANGUAGE, type Language } from '@/global/languages';
import { POSTS_PER_PAGE } from '@/global/constants';
import parseBlogSlug from '@/utils/parse-blog-slug';
import pageFetch from '@/utils/page.fetch';
import sanityFetch from '@/utils/sanity.fetch';
import BlogPost, { BlogPostPageQuery, type BlogPostPageProps } from '@/templates/blog-post.astro';
import Blog, { getTotalPosts, BlogPageQuery, type BlogPageProps } from '@/templates/blog.astro';

export async function getStaticPaths() {
  const collection = await sanityFetch<{ pages: {slug: string, language: Language }[]; pagination: { language: Language, slug: string, totalPosts: number }[]}>({
    query: `
      {
        "pages": *[defined(slug.current) && _type in ["BlogCategory_Collection", "BlogPost_Collection"] && language != $lang][] {
          "slug": slug.current,
          language 
        },
        "pagination": *[defined(slug.current) && _type in ["Blog_Page", "BlogCategory_Collection"] && language != $lang][]{
          language,
          "slug": slug.current,
          "totalPosts": count(select(
            _type == "Blog_Page" => *[_type == "BlogPost_Collection" && language == ^.language][],
            _type == "BlogCategory_Collection" => *[_type == "BlogPost_Collection" && category->slug.current == ^.slug.current && language == ^.language][],
            []
          )),
        }  
      }
    `,
    params: { lang: DEFAULT_LANGUAGE }
  });

  const pagination = (collection?.pagination ?? []).filter(({ totalPosts }) => totalPosts > POSTS_PER_PAGE).flatMap(({ language, totalPosts, slug }) => {
    const totalPages = Math.ceil(totalPosts / POSTS_PER_PAGE);
    const { page } = useTranslations(language)('urlParts');
    return Array.from({ length: totalPages - 1 }, (_, i) => ({ slug: `${slug}/${page}/${i + 2}`, language }));
  });


  return [...(collection?.pages ?? []), ...pagination].map(({ slug, language }) => ({
    params: { lang: language, slug: slug.replace(`/${language}/blog/`, '') }
  }));
}

const { slug: _slug = '', lang } = Astro.params as { slug: string | undefined, lang: Language };
const { slug, currentPage } = parseBlogSlug(_slug, lang);

if(!slug) return Astro.rewrite(`/${lang}/404`);

if(typeof currentPage === "number" && currentPage === 1 && _slug.endsWith('/1')) return Astro.redirect(slug);

if(typeof currentPage === 'number' && currentPage !== 1){
  if(currentPage < 1) return Astro.rewrite(`/${lang}/404`);

  const totalPosts = await getTotalPosts(slug, lang);
  if(!totalPosts) return Astro.rewrite(`/${lang}/404`);

  const totalPages = Math.ceil(totalPosts / POSTS_PER_PAGE);
  if(currentPage > totalPages) return Astro.rewrite(`/${lang}/404`); 
}

type AdditionalQueryProps = BlogPostPageProps & BlogPageProps;

const data = await pageFetch<AdditionalQueryProps>({
  slug,
  lang,
  currentPage,
  additionalQuery: `
    ${BlogPostPageQuery}
    ${BlogPageQuery({ currentPage, slug })}
  `,
});

if (!data) return Astro.rewrite(`/${lang}/404`);

const pages: Record<string, any> = {
  BlogPost_Collection: BlogPost,
  Blog_Page: Blog,
  BlogCategory_Collection: Blog,
};

const Page = pages[data.page._type];
if(!Page) return Astro.rewrite(`/${lang}/404`);
---

<Page page={{...data.page, currentPage }} metadata={data.metadata} />
