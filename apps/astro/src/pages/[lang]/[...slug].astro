---
import type { Language } from '@/global/languages';
import sanityFetch from '@/utils/sanity.fetch';
import pageFetch from '@/utils/page.fetch';
import DefaultPage from '@/templates/default.astro';
import PrivacyPolicy, { PrivacyPolicyPageQuery, type PrivacyPolicyPageProps } from '@/templates/privacy-policy.astro';

export async function getStaticPaths() {
  const slugs = await sanityFetch<{ slug: string; language: Language }[]>({
    query: `
      *[defined(slug.current) && _type in ["Service_Collection", "PrivacyPolicy_Page"]][]{
        "slug": slug.current,
        language  
      }
    `
  });

  return slugs.map(({ slug, language }) => ({
    params: { lang: language, slug: slug.replace(`/${language}/`, '') }
  }));
}

const { lang, slug: _slug = '' } = Astro.params as { lang: Language, slug: string | undefined };
const slug = `/${lang}/${_slug}`;

type AdditionalQueryProps = PrivacyPolicyPageProps;

const data = await pageFetch<AdditionalQueryProps>({
  slug,
  lang,
  additionalQuery: `
    ${PrivacyPolicyPageQuery}
  `,
});

if (!data) return Astro.rewrite(`/${lang}/404`);

const pages: Record<string, any> = {
  PrivacyPolicy_Page: PrivacyPolicy,
  default: DefaultPage,
};

const Page = pages[data.page._type] || pages.default;
---

<Page {...data} />

